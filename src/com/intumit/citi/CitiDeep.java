package com.intumit.citi;
// Generated 2018/12/20 �U�� 04:28:08 by Hibernate Tools 3.6.0.Final


import javax.persistence.*;
import static javax.persistence.GenerationType.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.hibernate.*;
import org.hibernate.Query;
import org.hibernate.criterion.*;
import org.hibernate.annotations.Index;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.intumit.hibernate.HibernateUtil;
import com.intumit.solr.robot.connector.citi.Action;
import com.intumit.solr.robot.connector.citi.MsgTemplate;
import com.intumit.solr.robot.connector.citi.Template;

/**
 * CitiDeep generated by hbm2java
 */
@Entity(name = "CitiDeep")
@Table(name = "CitiDeep")
public class CitiDeep implements java.io.Serializable {


    private Integer id;
    private String cardType;
    private String title;
    private String imageUrl;
    private String offerName1;
    private String offerText1;
    private String offerName2;
    private String offerText2;
    private String offerName3;
    private String offerText3;
    private String applyNow;
    private String knowMore;
    private String reward;
    private Integer priority;
    private String msgTemplate;
    private String msgType;
    
    public static synchronized CitiDeep get(int id) {
        try {
            return (CitiDeep)HibernateUtil.getSession().get(CitiDeep.class, id);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
        }

        return null;
    }

    public static List<String> logos(Integer idMin, Integer idMax) {
        String sql = "select CardType from CitiDeep "
                + (idMin != null ? " where id >= :idMin" : "")
                + (idMax != null ? " AND id <= :idMax" : "")
                + " order by id";
        
        Query q = HibernateUtil.getSession().createSQLQuery(sql); 

        if (idMin != null) q.setParameter("idMin", idMin);
        if (idMax != null) q.setParameter("idMax", idMax);
        
        List<String> arrlist = new ArrayList<String>();
        for(Object obj : q.list())
        {
            arrlist.addAll( Arrays.asList( obj.toString().split("(\\s|,|;)") ) );
        }
        return arrlist; //.toArray(new Object[0][]);
    }
    
    public static List<String> logos(Integer priority) {
        String sql = "select CardType from CitiDeep "
                + (priority != null ? " where priority = :priority" : "")
                + " order by id";
        
        Query q = HibernateUtil.getSession().createSQLQuery(sql); 

        if (priority != null) q.setParameter("priority", priority);
        
        List<String> arrlist = new ArrayList<String>();
        for(Object obj : q.list())
        {
            arrlist.addAll( Arrays.asList( obj.toString().split("(\\s|,|;)") ) );
        }
        return arrlist; //.toArray(new Object[0][]);
    }

    public static List<String> logos(String title) {
        String sql = "select CardType from CitiDeep "
                + (StringUtils.isNotEmpty(title) ? " where Title like :title" : "")
                + " order by id";
        
        Query q = HibernateUtil.getSession().createSQLQuery(sql); 

        if (StringUtils.isNotEmpty(title)) 
        {
            q.setParameter("title", title + "%");
        }
        
        List<String> arrlist = new ArrayList<String>();
        for(Object obj : q.list())
        {
            arrlist.addAll( Arrays.asList( obj.toString().split("(\\s|,|;)") ) );
        }
        return arrlist; //.toArray(new Object[0][]);
    }

    public static CitiDeep alist(String logo) {
        Session ses = null;
        try {
            ses = HibernateUtil.getSession();
            Criteria ct = ses.createCriteria(CitiDeep.class).add(Restrictions.like("cardType", logo, MatchMode.ANYWHERE));
            //return (List<CitiDeep>) ct.list();
            //Criteria ct = ses.createCriteria(CitiDeep.class).add(Restrictions.eq("cardType", cardtype));
			return (CitiDeep) ct.uniqueResult();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            ses.close();
        }
        return null;
    }    
    
    public static boolean saveOrUpdate(CitiDeep clue) {
        boolean success = false;
        Session ses = null;
        Transaction tx = null;
        try {
            ses = HibernateUtil.getSession();
            tx = ses.beginTransaction();
            
            ses.saveOrUpdate(clue);
            tx.commit();
            success = true;
        } catch (Exception e) {
            e.printStackTrace();
            tx.rollback();
        } finally {
            ses.close();
        }
        return success;
    }
    
    public static synchronized void save(String cardType, String title, String imageUrl, String offerName1, 
            String offerText1, String offerName2, String offerText2, String offerName3, 
            String offerText3, String applyNow, String knowMore, String reward, int priority) {
        save(null,cardType,title,imageUrl,offerName1,offerText1,offerName2,offerText2,offerName3,offerText3,applyNow,knowMore,reward,priority); 
    }
    
    public static synchronized void save(Integer id, String cardType, String title, String imageUrl, String offerName1, 
                                         String offerText1, String offerName2, String offerText2, String offerName3, 
                                         String offerText3, String applyNow, String knowMore, String reward, int priority) {
            Session ses = null;
            Transaction tx = null;
            CitiDeep citi = null; 
            try {
                ses = HibernateUtil.getSession();
                tx = ses.beginTransaction();
                if(null != id)
                    citi = get(id);
                if(null != citi)
                    citi.setId(id);
                else
                    citi = new CitiDeep();
                citi.setCardType(cardType);
                citi.setTitle(title);
                citi.setImageUrl(imageUrl);
                citi.setOfferName1(offerName1);
                citi.setOfferText1(offerText1);
                citi.setOfferName2(offerName2);
                citi.setOfferText2(offerText2);
                citi.setOfferName3(offerName3);
                citi.setOfferText3(offerText3);
                citi.setApplyNow(applyNow);
                citi.setKnowMore(knowMore);
                citi.setReward(reward);
                citi.setPriority(priority);
                ses.saveOrUpdate(citi);
                tx.commit();
            } catch (Exception e) {
                e.printStackTrace();
                tx.rollback();
            } finally {
                ses.close();
            }
        }
    
    public static void delete(CitiDeep msg) {
        Session ses = null;
        Transaction tx = null;
        try {
            ses = HibernateUtil.getSession();
            tx = ses.beginTransaction();
            ses.delete(msg);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            tx.rollback();
        } finally {
            ses.close();
        }
    }

    @Id 
    @GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name = "ID", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Index(name = "CardType")
    @Column(name = "CardType", nullable = false, length = 128)
    public String getCardType() {
        return this.cardType;
    }

    public void setCardType(String cardType) {
        this.cardType = cardType;
    }

    @Index(name = "Title")
    @Column(name = "Title", nullable = false, length = 64)
    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @Column(name = "ImageUrl")
    public String getImageUrl() {
        return this.imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }


    @Column(name = "OfferName1", length = 64)
    public String getOfferName1() {
        return this.offerName1;
    }

    public void setOfferName1(String offerName1) {
        this.offerName1 = offerName1;
    }


    @Column(name = "OfferText1", length = 64)
    public String getOfferText1() {
        return this.offerText1;
    }

    public void setOfferText1(String offerText1) {
        this.offerText1 = offerText1;
    }


    @Column(name = "OfferName2", length = 64)
    public String getOfferName2() {
        return this.offerName2;
    }

    public void setOfferName2(String offerName2) {
        this.offerName2 = offerName2;
    }


    @Column(name = "OfferText2", length = 64)
    public String getOfferText2() {
        return this.offerText2;
    }

    public void setOfferText2(String offerText2) {
        this.offerText2 = offerText2;
    }


    @Column(name = "OfferName3", length = 64)
    public String getOfferName3() {
        return this.offerName3;
    }

    public void setOfferName3(String offerName3) {
        this.offerName3 = offerName3;
    }


    @Column(name = "OfferText3", length = 64)
    public String getOfferText3() {
        return this.offerText3;
    }

    public void setOfferText3(String offerText3) {
        this.offerText3 = offerText3;
    }


    @Column(name = "ApplyNow")
    public String getApplyNow() {
        return this.applyNow;
    }

    public void setApplyNow(String applyNow) {
        this.applyNow = applyNow;
    }

    @Column(name = "KnowMore")
    public String getKnowMore() {
        return this.knowMore;
    }

    public void setKnowMore(String knowMore) {
        this.knowMore = knowMore;
    }

    @Column(name = "Reward")
    public String getReward() {
        return this.reward;
    }

    public void setReward(String reward) {
        this.reward = reward;
    }

    @Index(name = "Priority")
    @Column(name = "Priority", nullable = false)
    public Integer getPriority() {
        return this.priority;
    }

    public void setPriority(Integer priority) {
        this.priority = priority;
    }
    @Transient
    public String getMsgTemplate() {
        return msgTemplate;
    }

    public void setMsgTemplate(String msgTemplate) {
        this.msgTemplate = msgTemplate;
    }
    @Transient
    public String getMsgType() {
        return msgType;
    }

    public void setMsgType(String msgType) {
        this.msgType = msgType;
    }

    public void tranMsg() {
        ObjectMapper om = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        try {
            MsgTemplate msgtmp = om.readValue(getMsgTemplate(), MsgTemplate.class);
            Template tmpl = msgtmp.getTemplate();
            setReward(msgtmp.getReward());
            for(com.intumit.solr.robot.connector.citi.Column col : tmpl.getColumns())
            {
                setImageUrl(col.getThumbnailImageUrl().substring(col.getThumbnailImageUrl().lastIndexOf("/")+1));
                setApplyNow(col.getText());
                setKnowMore(col.getTitle());
                List<Action> act = col.getActions();
                setOfferText1(act.get(0).getLabel());
                setOfferName1(act.get(0).getText());
                setOfferText2(act.get(1).getLabel());
                setOfferName2(act.get(1).getText());
                setOfferText3(act.get(2).getLabel());
                setOfferName3(act.get(2).getText());
            }
        }
        catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
    }
    
}

